var m=Object.defineProperty;var S=(u,s,t)=>s in u?m(u,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):u[s]=t;var a=(u,s,t)=>(S(u,typeof s!="symbol"?s+"":s,t),t);import{i as p}from"./index-Bj0P4KbO.js";class w{constructor(){a(this,"id",-1);a(this,"name","");a(this,"imgIds",[])}static Copy(s){var t;return{id:s.id,name:s.name,imgIds:(t=s.imgIds)==null?void 0:t.concat()}}}class k{constructor(){a(this,"id",-1);a(this,"startTs");a(this,"endTs");a(this,"allDay",!0);a(this,"reminder",0);a(this,"repeat",0);a(this,"repeatEndTs");a(this,"title");a(this,"color",0);a(this,"priority",-1);a(this,"groupId",-1);a(this,"subtasks",[]);this.startTs=p().startOf("day"),this.endTs=p().startOf("day")}static Copy(s){var r,i,d;const t=JSON.parse(JSON.stringify(s));if(t.startTs=(r=s.startTs)==null?void 0:r.clone(),t.endTs=(i=s.endTs)==null?void 0:i.clone(),t.repeatEndTs=(d=s.repeatEndTs)==null?void 0:d.clone(),t.subtasks=[],s.subtasks)for(const o of s.subtasks)t.subtasks.push(w.Copy(o));return t}}class O{constructor(){a(this,"state",-1);a(this,"subtasks",{});a(this,"scheduleOverride")}static Copy(s){const t=new O;return t.state=s.state,s.subtasks&&(t.subtasks=JSON.parse(JSON.stringify(s.subtasks))),t}}class b{constructor(){a(this,"id",-1);a(this,"name","");a(this,"schedules",[]);a(this,"save",{})}static Copy(s){const t=new b;t.id=s.id,t.name=s.name,t.schedules=[];for(const r of s.schedules)t.schedules.push(k.Copy(r));return t.save=JSON.parse(JSON.stringify(s.save)),t}}class g{constructor(s){a(this,"dt",p().startOf("day"));a(this,"events",[]);a(this,"save",{});s&&(this.dt=s)}}class h{static createMonthData(s,t,r){var e;const i=s.startOf("month");let d=i.startOf("week");const o=[];do{const c=[];for(let n=0;n<7;n++){const f=h.createDayData(d,t);r&&((e=r.value)==null?void 0:e.dt.unix())==d.unix()&&(r.value=f),c.push(f),d=d.add(1,"days")}o.push(c)}while(d.month()==s.month());return{vid:s.year(),month:s.month(),year:s.year(),firstDayOfMonth:i,weekArr:o}}static createWeekData(s,t,r){var c;const i=s.startOf("month");let d=s.startOf("week");const o=[],e=[];for(let n=0;n<7;n++){const f=h.createDayData(d,t);r&&((c=r.value)==null?void 0:c.dt.unix())==d.unix()&&(r.value=f),e.push(f),d=d.add(1,"days")}return o.push(e),{vid:s.year(),month:s.month(),year:s.year(),firstDayOfMonth:i,weekArr:o}}static createDayData(s,t){const r=new g(s),i=s.unix();t.save[l(s)]==null&&(t.save[l(s)]={});const d=t.save[l(s)];for(const o of t.schedules){const e=k.Copy(o);if(e.startTs&&e.startTs.startOf("day").unix()<=i){if(e.startTs.startOf("day").unix()===i){r.events.push(e);continue}if(e.repeatEndTs&&e.repeatEndTs.unix()<i)continue;e.repeat==1?r.events.push(e):e.repeat==2?s.day()==e.startTs.day()&&r.events.push(e):e.repeat==3?s.date()==e.startTs.date()&&r.events.push(e):e.repeat==4&&s.date()==e.startTs.date()&&s.month()==e.startTs.month()&&r.events.push(e)}const c=d==null?void 0:d[e.id];if(c&&c.scheduleOverride){const n=c.scheduleOverride;n.title&&(e.title=n.title),n.color&&(e.color=n.color),n.priority&&(e.priority=n.priority),n.groupId&&(e.groupId=n.groupId),n.subtasks&&(e.subtasks=n.subtasks)}}return r.save=d,r.events.sort((o,e)=>{var f,y,T,v;const c=((f=d[o.id])==null?void 0:f.state)||0,n=((y=d[e.id])==null?void 0:y.state)||0;return c===n?((T=o.id)!=null?T:0)-((v=e.id)!=null?v:0):c-n}),r}static updateSchedularData(s,t,r,i,d){const o=l(i);if(d==="all"){if(t.id===-1){const c=s.schedules.reduce((n,f)=>f.id>n?f.id:n,0);t.id=c,s.schedules.push(t)}else{const c=s.schedules.findIndex(n=>n.id===t.id);c!==-1&&(s.schedules[c]=t)}o in s.save||(s.save[o]={});const e=s.save[o];e[t.id]=r}else if(d==="cur"){o in s.save||(s.save[o]={});const e=s.save[o],c=e[t.id]=r;c.scheduleOverride=t}else return!1;return!0}static parseScheduleData(s){const t=JSON.parse(s);return t.startTs=p(t.startTs),t.endTs=p(t.endTs),t.repeatEndTs=t.repeatEndTs&&p(t.repeatEndTs),t}static parseUserData(s){const t=JSON.parse(s);t.schedules===void 0&&(t.schedules=[]);for(let r=0;r<t.schedules.length;r++){const i=t.schedules[r];i.startTs=p(i.startTs),i.endTs=p(i.endTs),i.repeatEndTs=i.repeatEndTs&&p(i.repeatEndTs),i.subtasks===void 0&&(i.subtasks=[])}return t}}const l=u=>u===void 0?"":u.format("YYYY-MM-DD");export{g as D,O as S,b as U,h as a,w as b,k as c,l as d};
